@inject IJSRuntime JSRuntime
@if (Visible)
{
    <nav id="themesMenu">
        <ul class="nav nav-pills">
            @foreach (var themeSet in modVariabel.GroupedThemes)
            {
                <li class="nav-item theme-group">@themeSet.Key</li>
                @foreach (var theme in themeSet.Value)
                {
                    <li class="nav-item">
                        <a class="nav-link @(ActiveTheme.Name == theme ? "active" : "") "
               href="#"
               @onclick=@(async(e) => await OnItemClick(theme))
               @onclick:preventDefault>
                            <span class="image @theme.ToLower().Replace(" ", "-")" aria-hidden="true"></span>
                            <span class="theme-name">@theme</span>
                        </a>
                    </li>
                }
            }
        </ul>
    </nav>
}

@code {

    
    
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter] public ThemeItem ActiveTheme { get; set; }
    [Parameter] public EventCallback<ThemeItem> ActiveThemeChanged { get; set; }
    public async Task OnItemClick(string theme)
    {
        if (ActiveTheme.Name != theme)
        {
            var themeItem = ThemeItem.Create(theme);
            if (themeItem.StylesheetLinkUrl[1] is not null)
            {
                modVariabel.urlstyle = themeItem.StylesheetLinkUrl[1];
            }
            foreach (string stylesheetLinkUrl in themeItem.StylesheetLinkUrl)
                await JSRuntime.InvokeVoidAsync("fetch", stylesheetLinkUrl, new
                {
                    method = "GET",
                    mode = "no-cors"
                });
            await Task.WhenAll(
                ActiveThemeChanged.InvokeAsync(themeItem),
                VisibleChanged.InvokeAsync(false)
            );
        }

        StateHasChanged();
    }
}